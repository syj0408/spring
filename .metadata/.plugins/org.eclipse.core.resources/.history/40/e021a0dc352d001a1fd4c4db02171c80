package logic;

import java.io.File;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import dao.BoardDao;
import dao.ItemDao;
import dao.SaleDao;
import dao.SaleItemDao;
import dao.UserDao;

@Service //@Component + service  기능
public class ShopService { // ShopService는 itemController로 주입
	@Autowired
	private ItemDao itemDao; // 컨테이너중 itemDao를 가진 객체 주입 
	@Autowired
	private UserDao userDao; //UserDao 주입
	@Autowired
	private SaleDao saleDao;
	@Autowired
	private SaleItemDao saleItemDao;
	@Autowired
	private BoardDao boardDao;
	
	public List<Item> getItemList() {
		return itemDao.list(); //itemDao에 list()매서드 호출
	}

	public void itemCreate(Item item, HttpServletRequest request) { //item 입력된ㅇ ㅏ이템. request현재 나의 서블릿컨텍스트..
		//업로드된 이미지파일이 존재
		if(item.getPicture() != null && !item.getPicture().isEmpty()) {
			//uploadFileCreate= 파일 업로드: 업로드된 파일의 내용을 파일에 저장
			uploadFileCreate(item.getPicture(),request,"item/img/");
			item.setPictureUrl(item.getPicture().getOriginalFilename()); //setPictureUrl : item.getPicture()로부터 파일의 이름을 넣어줌
		}
		itemDao.insert(item);
	}

	private void uploadFileCreate(MultipartFile picture, HttpServletRequest request, String path) {
		//picture :업로드된 파일의 내용 , requset 위치 ,path 업로드되는 위치를 가진다. 
		String orgFile = picture.getOriginalFilename();
		String uploadPath=request.getServletContext().getRealPath("/") + path;
		File fpath = new File(uploadPath);
		if(!fpath.exists()) fpath.mkdirs(); //해당 path가없으면 만들기. mkdirs= board밑에 파일로 들어오기때문에 여러개가 들어옴
		try {
			//파일로 생성
			picture.transferTo(new File(uploadPath + orgFile)); //이부분이 진정한 =>파일 업로드
		}catch(Exception e) {
			e.printStackTrace();
		}
	}

	public Item getItem(String id) {
		return itemDao.selectOne(id);
	}

	public void itemUpdate(Item item, HttpServletRequest request) {
		//수정된 이미지 존재.
		if(item.getPicture() != null && !item.getPicture().isEmpty()) {
			uploadFileCreate(item.getPicture(),request,"item/img/");
			item.setPictureUrl(item.getPicture().getOriginalFilename()); 
		}
		itemDao.update(item);
	}

	public void delete(String id) { //중간다리 역할
		itemDao.delete(id);
	}

	public void userInsert(User user) {
		userDao.userInsert(user);
	}

	public User getUser(String userid) {
		return userDao.selectOne(userid);
	}

	public Sale checkend(User loginUser, Cart cart) { //loginUser 로그인정보  / cart상품정보
		Sale sale = new Sale();
		sale.setSaleid(saleDao.getMaxSaleId());  //saleid 값 +1
		sale.setUser(loginUser); //구매자 정보
		sale.setUserid(loginUser.getUserid());  //구매자 아이디
		sale.setUpdatetime(new Date()); //주문시간
		saleDao.insert(sale);  //레코드 삽입
		//getItemSetList : 주문 상품정보를 cart에서 조회
		List<ItemSet> itemList = cart.getItemSetList();  
		int i = 0;
		for(ItemSet is : itemList) {
			int saleItemId = ++i;  //1
			SaleItem saleItem = new SaleItem
					//		1       ,  1    ,ItemSet 객체 
					(sale.getSaleid(),saleItemId,is);
			sale.getItemList().add(saleItem); //상품 추가
			saleItemDao.insert(saleItem); //db에도 상품 추가
		}
		return sale;
	}

	public List<Sale> salelist(String id) { 
		return saleDao.list(id);//사용자아이디
	}

	public List<SaleItem> saleItemList(int saleid) {
		return saleItemDao.list(saleid); //주문번호
	}

	public void userUpdate(User user) {
		userDao.update(user);
	}

	public void userDelete(String userid) {
		userDao.delete(userid);
	}

	public int boardcount(String type, String content) {
		return boardDao.count(type,content);
	}

	public List<Board> boardlist(Integer pageNum, int limit, String type, String content) {
		return boardDao.list(pageNum,limit,type,content);
	}

	public void boardWrite(Board board, HttpServletRequest request) {
		//해당되는 첨부파일이 존재하는경우
		if(board.getFile1() != null && !board.getFile1().isEmpty()) {
			uploadFileCreate(board.getFile1(),request,"board/file/");  //request현재위치 , "board/file/" 파일이름
			//업로드 파일 이름 설정
			board.setFileurl(board.getFile1().getOriginalFilename());
		}
		//현재 등록된 게시물 번호 최대값.
		int max = boardDao.maxnum();
		board.setNum(++max); //원래 게시물 값보다 하나 큰 값을  num에 넣는다.
		board.setGrp(max);
		boardDao.insert(board);
	}

	public Board getBoard(Integer num, HttpServletRequest request) {
		if(request.getRequestURI().contains("detail.shop")) {
			boardDao.readcntadd(num); //조회수 증가
		}
		return boardDao.selectOne(num);
	}	
	
	public Board getBoard(int num) {
		return boardDao.selectOne(num);
	}	
	
	public void boardReply(Board board) {
		//grpstep+1증가
		boardDao.updateGrpStep(board);
		//답변글 등록
		int max = boardDao.maxnum();
		board.setNum(++max);
		board.setGrplevel(board.getGrplevel()+1);
		board.setGrpstep(board.getGrpstep()+1);
		boardDao.insert(board);
	}

	public void boardUpdate(Board board,HttpServletRequest request) {
		if(board.getFile1() != null && !board.getFile1().isEmpty()) {
			uploadFileCreate(board.getFile1(),request,"board/file/");  
			board.setFileurl(board.getFile1().getOriginalFilename());
		}
		boardDao.update(board);
	}

	public void boardDelete(Board board) {
		boardDao.delete(board);
	}

	public List<User> userList() {
		return userDao.list();
	}

	public List<User> userList(String[] idchks) {
		return userDao.list(idchks);
	}

	public void userPasswordUpdate(String userid, String chgpass) {
		return userDao.update(userid,chgpass);
	}

}
