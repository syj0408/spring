package config;

import java.util.Properties;



import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration	//스프링 환경설정 클래스. xml 대체하는 클래스
@ComponentScan(basePackages= {"controller","logic","dao","aop","websocket"})  //@ComponentScan xml���� ����ϸ� => annotation���·� �ٲ�. pakages���ִ� ������ ����ִ°��� ��üȭ����Ŵ
@EnableAspectJAutoProxy //AOP설정
@EnableWebMvc //유효성검증
public class MvcConfig implements WebMvcConfigurer{
	// @Bean : <bean id="handlerMapping" class="..HandlerMapping" />
	//  => HandlerMapping 클래스의 객체를 handlerMapping 이름으로 컨테이너 저장
	@Bean //요청정보와 Controller를 mapping  =ex>@RequestMapping("admin")
	public HandlerMapping handlerMapping() {
		RequestMappingHandlerMapping hm = new RequestMappingHandlerMapping();
		hm.setOrder(0); //순저.
		return hm;
	}
	@Bean //view�� ��ġ ����
	public ViewResolver viewResolver() {
		InternalResourceViewResolver vr = new InternalResourceViewResolver();
		vr.setPrefix("/WEB-INF/view/");
		vr.setSuffix(".jsp");
		return vr;
	}
	@Bean
	public MessageSource messageSource() {
		ResourceBundleMessageSource ms = new ResourceBundleMessageSource();
		ms.setBasename("messages");
		return ms;
	}
	@Bean	//���Ͼ��ε尴ü
	public MultipartResolver multipartResolver() {
		CommonsMultipartResolver mr = new CommonsMultipartResolver();
		mr.setMaxInMemorySize(10485760);
		mr.setMaxUploadSize(104857600);
		return mr;
	}
	@Bean  //����ó�� ��ü
	public SimpleMappingExceptionResolver exceptionHandler() {
		SimpleMappingExceptionResolver ser = new SimpleMappingExceptionResolver();
		Properties pr = new Properties();
		pr.put("exception.CartEmptyException","exception");  //���ܹ߻���  exception.jsp�� ��ü ����.
		pr.put("exception.LoginException","exception");
		pr.put("exception.BoardException","exception");
		return ser;
	}
}
